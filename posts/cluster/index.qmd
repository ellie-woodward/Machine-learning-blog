---
title: "Clustering Earthquake Data"
author: "Ellie Woodward"
date: "2023-11-10"
categories: [code]
image: "clustering.jpeg"
theme:
  - custom.css
---

<p style='font-size:23px'>
&emsp;&emsp; 
</p>
``` {python}
#| code-fold: true
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import DBSCAN
import warnings
```
<p style='font-size:23px'>
&emsp;&emsp;Clustering is a concept that is used by people every day. We use clustering when we are organizing objects into meaningful categories. Think about the grocery store. All the produce is organized into one aisle, chips in another, and alcohol in a different part. Then we label those sections so when we want to find an apple, for example, we know to look in the produce section. This concept is also important for machine learning. When doing unsupervised learning we group unlabeled examples so we can visualize patterns in a dataset.
</p>
<p style='font-size:23px'>
&emsp;&emsp;For example, if we had a dataset that held all the registered earthquakes around the world in 2016 and we wanted to study the mild to extreme earthquakes (Magnitude 3 or above), we could use clustering. We can use DBSCAN (Density-Based Spatial Clustering of Applications with Noise) to group together earthquakes based on their density. DBSCAN will group together points on the plot that are close to each other, it does this by making the points the same color.
</p>
<p style='font-size:23px'>
&emsp;&emsp;In the code below we are first managing our data. We are getting only the necessary points of interest by receiving the Magintude, Longitude and Latitude data then we are taking out all earthquakes that are registered under 3 Magintude. After that we are using DBSCAN. We are setting eps to 6, which means we are declaring how far away a point can be to still be considered a neighbor. Then we set the min samples to 4. This means there needs to be at least 4 registered earthquakes for it to be considered a cluster. This will mean we will have more sparse clusters.
</p>
```{python}
warnings.filterwarnings('ignore')
df_full = pd.read_csv("../../python-notebooks/datasets/earthquakes.csv")
df = df_full[['Latitude','Longitude','Magnitude']]
df = df[df.Magnitude >= 3]

dbscan = DBSCAN(eps = 6, min_samples=4).fit(df) # fitting the model
labels = dbscan.labels_ # getting the labels
```

<p style='font-size:23px'>
&emsp;&emsp;In the graph below we can see our plotted data. Each cluster has its own color, then the singular red points are random earthquakes that don’t belong to a cluster. The larger points are the graph indicate a larger magnitude earthquake. We can use this visualization to see areas that have high earthquake activity. 
</p>
```{python} 
#| code-fold: true
worldmap = gpd.read_file(gpd.datasets.get_path("naturalearth_lowres"))
# Creating axes and plotting world map
fig, ax = plt.subplots(figsize=(18, 10))
worldmap.plot(color="gray", ax=ax)

sns.scatterplot(x=df.Longitude, y=df.Latitude, hue=labels, palette='Set1', size=df.Magnitude, sizes=(10,200)) # plotting the clusters

ax. legend_ = None
plt.title("Earthquakes clusters with magnitudes greater than 3 in 2016")
plt.xlabel("Longitude") # X-axis label
plt.ylabel("Latitude") # Y-axis label

plt.show() # showing the plot
warnings.filterwarnings('ignore')
```

<p style='font-size:23px'>
&emsp;&emsp;In this example we used clustering to group equakes together based on their proximity to each other. This is a great example of unsupervised learning. We took a raw data set and clustered the data points based on their similarities. From here we can view the clusters determine some patterns from the data. The algorithm itself doesn’t understand the data but when we view it, especially on the map, we can see the patterns of each cluster. We see that certain area of the world are more prone to earthquakes than others. I hope this blog post was helpful in your understanding of Clustering and unsupervised learning.
<p>
<br/>
<br />
 <p style='font-size:15px'>
Thank you!
</p>

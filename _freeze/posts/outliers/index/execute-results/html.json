{
  "hash": "667378a944a6e2038c0dd7c7df258407",
  "result": {
    "markdown": "---\ntitle: \"Enhancing Machine Learning with Outlier Detection\"\nauthor: \"Ellie Woodward\"\ndate: \"2023-11-30\"\ncategories: [code]\nimage: \"outlier.webp\"\ntheme:\n  - custom.css\n---\n\n<p style='font-size:23px'>\n&emsp;&emsp; \n</p>\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.metrics import precision_score\nimport numpy as np\n```\n:::\n\n\n<p style='font-size:23px'>\n&emsp;&emsp; Detecting and predicting outliers in machine learning is similar to finding the needles in a haystack; it's about identifying data points that deviate from the norm. This process holds value as it helps ensure model accuracy and enhance overall performance. By spotting outliers, machine learning algorithms can avoid being disproportionately influenced by extreme data, thereby preventing skewed predictions or biased results. Removing outliers or treating them appropriately also aids in refining the model's understanding of the underlying patterns within the data, leading to reliable predictions. \nIn the end, spotting outliers boosts the trust and power of machine learning, helping it tackle real-life challenges better and offering valuable insights.\n</p>\n<p style='font-size:23px'>\n&emsp;&emsp;I found a dataset (<a href=\"https://www.kaggle.com/datasets/chrizzles/swiss-banknote-conterfeit-detection\">here</a>) containing measurements of 200 banknotes, each characterized by attributes like length, edge widths, margins, and diagonal length. Split evenly between genuine and counterfeit, this dataset serves as a resource for classifying banknotes based on their dimensional features.\n<p>\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\ndf = pd.read_csv(\"../../python-notebooks/datasets/banknotes.csv\")\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>conterfeit</th>\n      <th>Length</th>\n      <th>Left</th>\n      <th>Right</th>\n      <th>Bottom</th>\n      <th>Top</th>\n      <th>Diagonal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>214.8</td>\n      <td>131.0</td>\n      <td>131.1</td>\n      <td>9.0</td>\n      <td>9.7</td>\n      <td>141.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>214.6</td>\n      <td>129.7</td>\n      <td>129.7</td>\n      <td>8.1</td>\n      <td>9.5</td>\n      <td>141.7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>214.8</td>\n      <td>129.7</td>\n      <td>129.7</td>\n      <td>8.7</td>\n      <td>9.6</td>\n      <td>142.2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>214.8</td>\n      <td>129.7</td>\n      <td>129.6</td>\n      <td>7.5</td>\n      <td>10.4</td>\n      <td>142.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>215.0</td>\n      <td>129.6</td>\n      <td>129.7</td>\n      <td>10.4</td>\n      <td>7.7</td>\n      <td>141.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<p style='font-size:23px'>\n&emsp;&emsp;We can use Boxplots to visualize the different columns in the dataset and view the outliers.\n</p>\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nsns.boxplot(data=df,x=df[\"Length\"])\nplt.title(\"Boxplot of Swiss Banknote Length \")\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nText(0.5, 1.0, 'Boxplot of Swiss Banknote Length ')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-2.png){width=545 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\"}\nsns.boxplot(data=df,x=df[\"Left\"])\nplt.title(\"Boxplot of Swiss Banknote Left \")\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\nText(0.5, 1.0, 'Boxplot of Swiss Banknote Left ')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-2.png){width=545 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nsns.boxplot(data=df,x=df[\"Right\"])\nplt.title(\"Boxplot of Swiss Banknote Right \")\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\nText(0.5, 1.0, 'Boxplot of Swiss Banknote Right ')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-2.png){width=545 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\"}\nsns.boxplot(data=df,x=df[\"Bottom\"])\nplt.title(\"Boxplot of Swiss Banknote Bottom \")\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nText(0.5, 1.0, 'Boxplot of Swiss Banknote Bottom ')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-2.png){width=545 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\nsns.boxplot(data=df,x=df[\"Top\"])\nplt.title(\"Boxplot of Swiss Banknote Top \")\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\nText(0.5, 1.0, 'Boxplot of Swiss Banknote Top ')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-2.png){width=545 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code code-fold=\"true\"}\nsns.boxplot(data=df,x=df[\"Diagonal\"])\nplt.title(\"Boxplot of Swiss Banknote Diagonal \")\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nText(0.5, 1.0, 'Boxplot of Swiss Banknote Diagonal ')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-2.png){width=545 height=449}\n:::\n:::\n\n\n <p style='font-size:23px'>\n&emsp;&emsp;As you can see the box plots for columns: Length, Left, Right, and Top all contain outliers. The next step involves training models using IsolationForest to address and handle these outliers effectively. Isolation is an anomaly detection algorithm used to identify outliers or anomalies in a dataset. It quickly spots anomalies by creating random trees that isolate outliers, as these anomalies typically need fewer steps to separate from the rest of the data. It's a rapid and efficient method, particularly in datasets with many columns, like ours.\n</p>\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nX = df[['Length', 'Left', 'Right', 'Bottom', 'Top', 'Diagonal']]\ny = df['conterfeit']\nX_train, X_test, y_train, y_test = train_test_split(X, y, \ntest_size=0.33, random_state=42)\nclf = IsolationForest(random_state=0)\nclf.fit(X_train)\ny_pred = clf.predict(X_test)\n```\n:::\n\n\n<p style='font-size:23px'>\n&emsp;&emsp;After preparing for anomaly detection we use the train_test_split function,  the dataset is divided into training and testing sets. An Isolation Forest model, a method commonly used for anomaly detection, is instantiated and trained on the training data. Finally, the trained model predicts anomalies in the test set, flagging instances that deviate from the norm. It also potentially identifies counterfeit banknotes based on their dimensional attributes.\n</p>\n<p style='font-size:23px'>\n&emsp;&emsp;Next, we will convert the predictions into binary values: 1 for outliers (identified by -1) and 0 for normal instances. It then calculates and prints the precision score, measuring how accurately the model identified outliers compared to the actual test labels.\n</p>\n\n::: {.cell execution_count=10}\n``` {.python .cell-code code-fold=\"true\"}\npred = pd.DataFrame({'pred': y_pred})\npred['y_pred'] = np.where(pred['pred'] == -1, 1, 0)\ny_pred = pred['y_pred'] \nprint(\"Precision Score:\", precision_score(y_test, y_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrecision Score: 0.625\n```\n:::\n:::\n\n\n<p style='font-size:23px'>\n&emsp;&emsp;The precision score of 0.625 underscores the model's proficiency in accurately identifying outliers compared to the total predicted outliers. While demonstrating a substantial ability to spot anomalies, this score also hints at potential areas for refinement or enhancement in the anomaly detection process, ensuring more precise and reliable identification in future analyses.\n</p>\n<p style='font-size:23px'>\n&emsp;&emsp;In this case, outlier detection is important as it aids in distinguishing genuine banknotes from counterfeits based on their dimensional attributes. Identifying outliers among these measurements, such as unusual lengths or irregular margin widths, becomes essential in spotting counterfeit notes that deviate significantly from the norm. By leveraging outlier detection techniques like IsolationForest, the goal is to accurately pinpoint these anomalies, enhancing the ability to spot counterfeit banknotes.\n</p>\n<p style='font-size:23px'>\n&emsp;&emsp;In machine learning, outlier detection forms a fundamental preprocessing step. By cleaning the dataset of outliers, the following machine-learning models become more accurate in classifying genuine versus counterfeit banknotes. Removing outliers ensures that the model isn't influenced by irregular data points, leading to more reliable predictions and a stronger performance overall. Therefore, outlier detection plays a pivotal role in refining the dataset and improving the effectiveness of machine learning algorithms.\n</p>\n<br/>\n<br />\n <p style='font-size:15px'>\nThank you!\n</p>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
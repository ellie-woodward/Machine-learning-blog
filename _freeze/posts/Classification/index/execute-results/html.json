{
  "hash": "3e1ce4ef0734a95188a36aab42f1817a",
  "result": {
    "markdown": "---\ntitle: \"KNN Empowers Fruit Classification Mastery\"\nauthor: \"Ellie Woodward\"\ndate: \"2023-11-23\"\ncategories: [code]\nimage: \"classification.png\"\ntheme:\n  - custom.css\n---\n\n<p style='font-size:23px'>\n&emsp;&emsp; \n</p>\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier  # get accuracy by KNN classifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n```\n:::\n\n\n<p style='font-size:23px'>\n&emsp;&emsp; Classification in machine learning is a method used to teach models how to discern and assign predefined categories or classes to input data based on its features or attributes. It's a foundational concept that serves as the backbone for various tasks, enabling machines to categorize or label data. This ability is crucial in making informed decisions or predictions.\n</p>\n<p style='font-size:23px'>\n&emsp;&emsp;Through classification, machines learn patterns from labeled examples. For instance, in the case of this fruit dataset (found <a href=\"https://www.kaggle.com/datasets/mjamilmoughal/fruits-with-colors-dataset\">here</a>), the model learns to associate certain combinations of mass, width, height, and color score with specific fruit types (e.g., apple, mandarin, lemon). By identifying these patterns, the model can then categorize the fruits based on their features into the appropriate classes it has learned. This ability to generalize from known patterns to predict unseen data is the essence of classification.\n<p>\n<p style='font-size:23px'>\n&emsp;&emsp;The dataset contains information about various fruits, comprising attributes such as 'fruit_label' (a numerical label assigned to each fruit type), 'fruit_name' (the name of the fruit, which includes different types like apple, mandarin, etc.), 'fruit_subtype' (subcategories of certain fruits), 'mass' (the weight of the fruit in grams), 'width' (the width of the fruit), 'height' (the height of the fruit), and 'color_score' (a score representing the color of the fruit).\n</p>\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\nfruits_df = pd.read_table('../../python-notebooks/datasets/fruit_data_with_colors.txt')\nfruits_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fruit_label</th>\n      <th>fruit_name</th>\n      <th>fruit_subtype</th>\n      <th>mass</th>\n      <th>width</th>\n      <th>height</th>\n      <th>color_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>apple</td>\n      <td>granny_smith</td>\n      <td>192</td>\n      <td>8.4</td>\n      <td>7.3</td>\n      <td>0.55</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>apple</td>\n      <td>granny_smith</td>\n      <td>180</td>\n      <td>8.0</td>\n      <td>6.8</td>\n      <td>0.59</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>apple</td>\n      <td>granny_smith</td>\n      <td>176</td>\n      <td>7.4</td>\n      <td>7.2</td>\n      <td>0.60</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>mandarin</td>\n      <td>mandarin</td>\n      <td>86</td>\n      <td>6.2</td>\n      <td>4.7</td>\n      <td>0.80</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>mandarin</td>\n      <td>mandarin</td>\n      <td>84</td>\n      <td>6.0</td>\n      <td>4.6</td>\n      <td>0.79</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n <p style='font-size:23px'>\n&emsp;&emsp;The graph below effectively visualizes the relationship between the width and height of different fruits, distinguishing each fruit type by color and labeling them in the legend for easy identification. Adjustments can be made to accommodate different fruit types and their respective attributes for visualization.\n</p>\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nfruit_colors = {'apple': 'green', 'mandarin': 'orange', 'lemon': 'red'}  # Add more colors if needed\n\nfor fruit, color in fruit_colors.items():\n    fruit_data = fruits_df[fruits_df['fruit_name'] == fruit]\n    plt.scatter(fruit_data['width'], fruit_data['height'], c=color, label=fruit)\n\nplt.xlabel('Width')\nplt.ylabel('Height')\nplt.title('Fruit Dataset - Width vs Height (Colored by Fruit Name)')\nplt.legend(title='Fruit Name')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=590 height=449}\n:::\n:::\n\n\n <p style='font-size:23px'>\n&emsp;&emsp;As we can see in the scatter plot above the fruits tend to group themselves based on height and width. Now lets train the data using train_test_split.\n</p>\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfeature_names = ['mass', 'width', 'height', 'color_score']\nx=fruits_df[feature_names]\ny=fruits_df['fruit_label']\n\nx_train, x_test, y_train, y_test = train_test_split(x,y, random_state=0)\n\nprint(x_train[:3])\n\nscaler = MinMaxScaler()\nx_train=scaler.fit_transform(x_train)\nx_test= scaler.transform(x_test)\n\nprint(\"\\nAfter scaling\\n\")\nprint(x_train[:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    mass  width  height  color_score\n42   154    7.2     7.2         0.82\n48   174    7.3    10.1         0.72\n7     76    5.8     4.0         0.81\n\nAfter scaling\n\n[[0.27857143 0.41176471 0.49230769 0.72972973]\n [0.35       0.44117647 0.93846154 0.45945946]\n [0.         0.         0.         0.7027027 ]]\n```\n:::\n:::\n\n\n <p style='font-size:23px'>\n&emsp;&emsp;After scaling seen above, the values displayed represent the same three fruits, but the feature values have been transformed. Each feature value is now proportionally represented between 0 and 1 based on its original range in the dataset. These scaled values are essential for model training as they provide a consistent scale for all features, preventing one particular feature from dominating the learning process due to its higher magnitude. This standardized representation allows the model to learn effectively from the data and make unbiased predictions without the influence of varying feature scales.\n</p>\n <p style='font-size:23px'>\n&emsp;&emsp;Now we will find the accuracy of the training data on a KNeighborsClassifier. The accuracy scores on both the training and test sets help assess the KNN model's performance. A high accuracy score on the training set suggests that the model learned well from the training data. However, the test set accuracy is more crucial, as it indicates how effectively the model can predict fruit types on new, unseen data, reflecting its overall performance and ability to generalize to new instances. Comparing these scores helps gauge the model's performance and assess the potential for overfitting (if the training accuracy is significantly higher than the test accuracy).\n</p>\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nknn = KNeighborsClassifier()\nknn.fit(x_train, y_train)\n\nprint('Accuracy of KNN classifier on training set:{:.2f}'\n     .format(knn.score(x_train, y_train)))\n\nprint('Accuracy of KNN Classifier on test set:{:.2f}'\n     .format(knn.score(x_test, y_test)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy of KNN classifier on training set:0.95\nAccuracy of KNN Classifier on test set:1.00\n```\n:::\n:::\n\n\n <p style='font-size:23px'>\n&emsp;&emsp;The accuracy of the training set suggests that the KNN classifier achieved an accuracy of 95%. The accuracy score represents the proportion of correctly predicted fruit labels by the model compared to the total number of fruits in the training dataset. A score of 0.95 suggests that the model accurately predicted the fruit types for 95% of the instances in the dataset used for training.\n</p>\n <p style='font-size:23px'>\n&emsp;&emsp;The accuracy of the test set indicates that the KNN classifier achieved a perfect accuracy score of 100%. The accuracy score on the test set represents the model's ability to generalize and make accurate predictions on new, unseen data (not used during training). A score of 100% means that the model correctly classified all the fruit instances in the test dataset.\n</p>\n <p style='font-size:23px'>\n&emsp;&emsp;In summary, the KNN classifier exhibited strong performance on both the training and test datasets. A high accuracy score on the test set (1.00) suggests that the model generalized exceptionally well to new data, correctly predicting all fruit types. Meanwhile, the slightly lower training set accuracy (0.95) indicates that the model performed slightly worse on the data it was trained on, potentially suggesting a small amount of overfitting or a minor limitation in capturing certain complexities present in the training data. Overall, these scores suggest that the KNN classifier is performing very well in classifying fruit types based on the provided features.\n</p>\n <p style='font-size:23px'>\n&emsp;&emsp;In conclusion, these results underline the importance of effective model training and evaluation. The strong performance of the model on the test set indicates its ability to generalize well to unseen data, a crucial aspect in real-world applications. Classification, as demonstrated here, plays a pivotal role in various domains, allowing machines to classify data into distinct categories or classes, enabling tasks like spam detection, medical diagnosis, image recognition, and more. High-performing classification models facilitate informed decision-making, automation, and pattern recognition, showcasing their critical role in advancing machine learning applications.\n</p>\n<br/>\n<br />\n <p style='font-size:15px'>\nThank you!\n</p>\n <p style='font-size:15px'>\nReferences: <a href=\"https://www.ibm.com/topics/knn\">IBM KNN</a> | \n            <a href=\"https://medium.com/analytics-vidhya/classification-in-machine-learning-ed30753d9461\">Classification</a> \n</p>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}